Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> statements
Rule 2     start -> empty
Rule 3     statements -> statements statement
Rule 4     statements -> statement
Rule 5     empty -> <empty>
Rule 6     statement -> ID EQUALS expr
Rule 7     statement -> ID EQUALS ID
Rule 8     statement -> PRINT LPARENTHESIS expr RPARENTHESIS
Rule 9     statement -> expr
Rule 10    expr -> expr DIVIDE expr
Rule 11    expr -> expr MULTIPLY expr
Rule 12    expr -> expr ADD expr
Rule 13    expr -> expr SUBTRACT expr
Rule 14    expr -> expr MODULUS expr
Rule 15    expr -> expr EEQUALS expr
Rule 16    expr -> expr GREATER expr
Rule 17    expr -> expr SMALLER expr
Rule 18    expr -> expr AND expr
Rule 19    expr -> expr OR expr
Rule 20    expr -> expr NOTEQUALS expr
Rule 21    expr -> expr GEQUAL expr
Rule 22    expr -> expr SEQUAL expr
Rule 23    expr -> expr INCREMENT
Rule 24    expr -> expr DECREMENT
Rule 25    expr -> ID
Rule 26    expr -> INT
Rule 27    expr -> FLOAT
Rule 28    expr -> STRING
Rule 29    expr -> CHAR
Rule 30    expr -> BOOL
Rule 31    statement -> ifstatement
Rule 32    statement -> ifstatement elsestatement
Rule 33    ifstatement -> IF expr LCURLY statement RCURLY
Rule 34    elsestatement -> ELSE LCURLY statement RCURLY
Rule 35    expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

Terminals, with rules where they appear

ADD                  : 12
AND                  : 18
BOOL                 : 30
CHAR                 : 29
DECREMENT            : 24
DIVIDE               : 10
EEQUALS              : 15
ELSE                 : 34
EQUALS               : 6 7
FLOAT                : 27
GEQUAL               : 21
GREATER              : 16
ID                   : 6 7 7 25
IF                   : 33
INCREMENT            : 23
INT                  : 26
LCURLY               : 33 34 35
LOOP                 : 35
LPARENTHESIS         : 8 35
MODULUS              : 14
MULTIPLY             : 11
NOTEQUALS            : 20
OR                   : 19
PRINT                : 8
RCURLY               : 33 34 35
RPARENTHESIS         : 8 35
SEQUAL               : 22
SMALLER              : 17
STRING               : 28
SUBTRACT             : 13
error                : 

Nonterminals, with rules where they appear

elsestatement        : 32
empty                : 2
expr                 : 6 8 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 24 33 35
ifstatement          : 31 32
start                : 0
statement            : 3 4 33 34
statements           : 1 3 35

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . statements
    (2) start -> . empty
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) empty -> .
    (6) statement -> . ID EQUALS expr
    (7) statement -> . ID EQUALS ID
    (8) statement -> . PRINT LPARENTHESIS expr RPARENTHESIS
    (9) statement -> . expr
    (31) statement -> . ifstatement
    (32) statement -> . ifstatement elsestatement
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY
    (33) ifstatement -> . IF expr LCURLY statement RCURLY

    $end            reduce using rule 5 (empty -> .)
    ID              shift and go to state 5
    PRINT           shift and go to state 7
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14
    IF              shift and go to state 15

    start                          shift and go to state 1
    statements                     shift and go to state 2
    empty                          shift and go to state 3
    statement                      shift and go to state 4
    expr                           shift and go to state 6
    ifstatement                    shift and go to state 8

state 1

    (0) S' -> start .



state 2

    (1) start -> statements .
    (3) statements -> statements . statement
    (6) statement -> . ID EQUALS expr
    (7) statement -> . ID EQUALS ID
    (8) statement -> . PRINT LPARENTHESIS expr RPARENTHESIS
    (9) statement -> . expr
    (31) statement -> . ifstatement
    (32) statement -> . ifstatement elsestatement
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY
    (33) ifstatement -> . IF expr LCURLY statement RCURLY

    $end            reduce using rule 1 (start -> statements .)
    ID              shift and go to state 5
    PRINT           shift and go to state 7
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14
    IF              shift and go to state 15

    statement                      shift and go to state 16
    expr                           shift and go to state 6
    ifstatement                    shift and go to state 8

state 3

    (2) start -> empty .

    $end            reduce using rule 2 (start -> empty .)


state 4

    (4) statements -> statement .

    ID              reduce using rule 4 (statements -> statement .)
    PRINT           reduce using rule 4 (statements -> statement .)
    INT             reduce using rule 4 (statements -> statement .)
    FLOAT           reduce using rule 4 (statements -> statement .)
    STRING          reduce using rule 4 (statements -> statement .)
    CHAR            reduce using rule 4 (statements -> statement .)
    BOOL            reduce using rule 4 (statements -> statement .)
    LOOP            reduce using rule 4 (statements -> statement .)
    IF              reduce using rule 4 (statements -> statement .)
    $end            reduce using rule 4 (statements -> statement .)
    RCURLY          reduce using rule 4 (statements -> statement .)


state 5

    (6) statement -> ID . EQUALS expr
    (7) statement -> ID . EQUALS ID
    (25) expr -> ID .

    EQUALS          shift and go to state 17
    DIVIDE          reduce using rule 25 (expr -> ID .)
    MULTIPLY        reduce using rule 25 (expr -> ID .)
    ADD             reduce using rule 25 (expr -> ID .)
    SUBTRACT        reduce using rule 25 (expr -> ID .)
    MODULUS         reduce using rule 25 (expr -> ID .)
    EEQUALS         reduce using rule 25 (expr -> ID .)
    GREATER         reduce using rule 25 (expr -> ID .)
    SMALLER         reduce using rule 25 (expr -> ID .)
    AND             reduce using rule 25 (expr -> ID .)
    OR              reduce using rule 25 (expr -> ID .)
    NOTEQUALS       reduce using rule 25 (expr -> ID .)
    GEQUAL          reduce using rule 25 (expr -> ID .)
    SEQUAL          reduce using rule 25 (expr -> ID .)
    INCREMENT       reduce using rule 25 (expr -> ID .)
    DECREMENT       reduce using rule 25 (expr -> ID .)
    ID              reduce using rule 25 (expr -> ID .)
    PRINT           reduce using rule 25 (expr -> ID .)
    INT             reduce using rule 25 (expr -> ID .)
    FLOAT           reduce using rule 25 (expr -> ID .)
    STRING          reduce using rule 25 (expr -> ID .)
    CHAR            reduce using rule 25 (expr -> ID .)
    BOOL            reduce using rule 25 (expr -> ID .)
    LOOP            reduce using rule 25 (expr -> ID .)
    IF              reduce using rule 25 (expr -> ID .)
    $end            reduce using rule 25 (expr -> ID .)
    RCURLY          reduce using rule 25 (expr -> ID .)


state 6

    (9) statement -> expr .
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

    ID              reduce using rule 9 (statement -> expr .)
    PRINT           reduce using rule 9 (statement -> expr .)
    INT             reduce using rule 9 (statement -> expr .)
    FLOAT           reduce using rule 9 (statement -> expr .)
    STRING          reduce using rule 9 (statement -> expr .)
    CHAR            reduce using rule 9 (statement -> expr .)
    BOOL            reduce using rule 9 (statement -> expr .)
    LOOP            reduce using rule 9 (statement -> expr .)
    IF              reduce using rule 9 (statement -> expr .)
    $end            reduce using rule 9 (statement -> expr .)
    RCURLY          reduce using rule 9 (statement -> expr .)
    DIVIDE          shift and go to state 18
    MULTIPLY        shift and go to state 19
    ADD             shift and go to state 20
    SUBTRACT        shift and go to state 21
    MODULUS         shift and go to state 22
    EEQUALS         shift and go to state 23
    GREATER         shift and go to state 24
    SMALLER         shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    NOTEQUALS       shift and go to state 28
    GEQUAL          shift and go to state 29
    SEQUAL          shift and go to state 30
    INCREMENT       shift and go to state 31
    DECREMENT       shift and go to state 32


state 7

    (8) statement -> PRINT . LPARENTHESIS expr RPARENTHESIS

    LPARENTHESIS    shift and go to state 33


state 8

    (31) statement -> ifstatement .
    (32) statement -> ifstatement . elsestatement
    (34) elsestatement -> . ELSE LCURLY statement RCURLY

    ID              reduce using rule 31 (statement -> ifstatement .)
    PRINT           reduce using rule 31 (statement -> ifstatement .)
    INT             reduce using rule 31 (statement -> ifstatement .)
    FLOAT           reduce using rule 31 (statement -> ifstatement .)
    STRING          reduce using rule 31 (statement -> ifstatement .)
    CHAR            reduce using rule 31 (statement -> ifstatement .)
    BOOL            reduce using rule 31 (statement -> ifstatement .)
    LOOP            reduce using rule 31 (statement -> ifstatement .)
    IF              reduce using rule 31 (statement -> ifstatement .)
    $end            reduce using rule 31 (statement -> ifstatement .)
    RCURLY          reduce using rule 31 (statement -> ifstatement .)
    ELSE            shift and go to state 35

    elsestatement                  shift and go to state 34

state 9

    (26) expr -> INT .

    DIVIDE          reduce using rule 26 (expr -> INT .)
    MULTIPLY        reduce using rule 26 (expr -> INT .)
    ADD             reduce using rule 26 (expr -> INT .)
    SUBTRACT        reduce using rule 26 (expr -> INT .)
    MODULUS         reduce using rule 26 (expr -> INT .)
    EEQUALS         reduce using rule 26 (expr -> INT .)
    GREATER         reduce using rule 26 (expr -> INT .)
    SMALLER         reduce using rule 26 (expr -> INT .)
    AND             reduce using rule 26 (expr -> INT .)
    OR              reduce using rule 26 (expr -> INT .)
    NOTEQUALS       reduce using rule 26 (expr -> INT .)
    GEQUAL          reduce using rule 26 (expr -> INT .)
    SEQUAL          reduce using rule 26 (expr -> INT .)
    INCREMENT       reduce using rule 26 (expr -> INT .)
    DECREMENT       reduce using rule 26 (expr -> INT .)
    ID              reduce using rule 26 (expr -> INT .)
    PRINT           reduce using rule 26 (expr -> INT .)
    INT             reduce using rule 26 (expr -> INT .)
    FLOAT           reduce using rule 26 (expr -> INT .)
    STRING          reduce using rule 26 (expr -> INT .)
    CHAR            reduce using rule 26 (expr -> INT .)
    BOOL            reduce using rule 26 (expr -> INT .)
    LOOP            reduce using rule 26 (expr -> INT .)
    IF              reduce using rule 26 (expr -> INT .)
    $end            reduce using rule 26 (expr -> INT .)
    LCURLY          reduce using rule 26 (expr -> INT .)
    RCURLY          reduce using rule 26 (expr -> INT .)
    RPARENTHESIS    reduce using rule 26 (expr -> INT .)


state 10

    (27) expr -> FLOAT .

    DIVIDE          reduce using rule 27 (expr -> FLOAT .)
    MULTIPLY        reduce using rule 27 (expr -> FLOAT .)
    ADD             reduce using rule 27 (expr -> FLOAT .)
    SUBTRACT        reduce using rule 27 (expr -> FLOAT .)
    MODULUS         reduce using rule 27 (expr -> FLOAT .)
    EEQUALS         reduce using rule 27 (expr -> FLOAT .)
    GREATER         reduce using rule 27 (expr -> FLOAT .)
    SMALLER         reduce using rule 27 (expr -> FLOAT .)
    AND             reduce using rule 27 (expr -> FLOAT .)
    OR              reduce using rule 27 (expr -> FLOAT .)
    NOTEQUALS       reduce using rule 27 (expr -> FLOAT .)
    GEQUAL          reduce using rule 27 (expr -> FLOAT .)
    SEQUAL          reduce using rule 27 (expr -> FLOAT .)
    INCREMENT       reduce using rule 27 (expr -> FLOAT .)
    DECREMENT       reduce using rule 27 (expr -> FLOAT .)
    ID              reduce using rule 27 (expr -> FLOAT .)
    PRINT           reduce using rule 27 (expr -> FLOAT .)
    INT             reduce using rule 27 (expr -> FLOAT .)
    FLOAT           reduce using rule 27 (expr -> FLOAT .)
    STRING          reduce using rule 27 (expr -> FLOAT .)
    CHAR            reduce using rule 27 (expr -> FLOAT .)
    BOOL            reduce using rule 27 (expr -> FLOAT .)
    LOOP            reduce using rule 27 (expr -> FLOAT .)
    IF              reduce using rule 27 (expr -> FLOAT .)
    $end            reduce using rule 27 (expr -> FLOAT .)
    LCURLY          reduce using rule 27 (expr -> FLOAT .)
    RCURLY          reduce using rule 27 (expr -> FLOAT .)
    RPARENTHESIS    reduce using rule 27 (expr -> FLOAT .)


state 11

    (28) expr -> STRING .

    DIVIDE          reduce using rule 28 (expr -> STRING .)
    MULTIPLY        reduce using rule 28 (expr -> STRING .)
    ADD             reduce using rule 28 (expr -> STRING .)
    SUBTRACT        reduce using rule 28 (expr -> STRING .)
    MODULUS         reduce using rule 28 (expr -> STRING .)
    EEQUALS         reduce using rule 28 (expr -> STRING .)
    GREATER         reduce using rule 28 (expr -> STRING .)
    SMALLER         reduce using rule 28 (expr -> STRING .)
    AND             reduce using rule 28 (expr -> STRING .)
    OR              reduce using rule 28 (expr -> STRING .)
    NOTEQUALS       reduce using rule 28 (expr -> STRING .)
    GEQUAL          reduce using rule 28 (expr -> STRING .)
    SEQUAL          reduce using rule 28 (expr -> STRING .)
    INCREMENT       reduce using rule 28 (expr -> STRING .)
    DECREMENT       reduce using rule 28 (expr -> STRING .)
    ID              reduce using rule 28 (expr -> STRING .)
    PRINT           reduce using rule 28 (expr -> STRING .)
    INT             reduce using rule 28 (expr -> STRING .)
    FLOAT           reduce using rule 28 (expr -> STRING .)
    STRING          reduce using rule 28 (expr -> STRING .)
    CHAR            reduce using rule 28 (expr -> STRING .)
    BOOL            reduce using rule 28 (expr -> STRING .)
    LOOP            reduce using rule 28 (expr -> STRING .)
    IF              reduce using rule 28 (expr -> STRING .)
    $end            reduce using rule 28 (expr -> STRING .)
    LCURLY          reduce using rule 28 (expr -> STRING .)
    RCURLY          reduce using rule 28 (expr -> STRING .)
    RPARENTHESIS    reduce using rule 28 (expr -> STRING .)


state 12

    (29) expr -> CHAR .

    DIVIDE          reduce using rule 29 (expr -> CHAR .)
    MULTIPLY        reduce using rule 29 (expr -> CHAR .)
    ADD             reduce using rule 29 (expr -> CHAR .)
    SUBTRACT        reduce using rule 29 (expr -> CHAR .)
    MODULUS         reduce using rule 29 (expr -> CHAR .)
    EEQUALS         reduce using rule 29 (expr -> CHAR .)
    GREATER         reduce using rule 29 (expr -> CHAR .)
    SMALLER         reduce using rule 29 (expr -> CHAR .)
    AND             reduce using rule 29 (expr -> CHAR .)
    OR              reduce using rule 29 (expr -> CHAR .)
    NOTEQUALS       reduce using rule 29 (expr -> CHAR .)
    GEQUAL          reduce using rule 29 (expr -> CHAR .)
    SEQUAL          reduce using rule 29 (expr -> CHAR .)
    INCREMENT       reduce using rule 29 (expr -> CHAR .)
    DECREMENT       reduce using rule 29 (expr -> CHAR .)
    ID              reduce using rule 29 (expr -> CHAR .)
    PRINT           reduce using rule 29 (expr -> CHAR .)
    INT             reduce using rule 29 (expr -> CHAR .)
    FLOAT           reduce using rule 29 (expr -> CHAR .)
    STRING          reduce using rule 29 (expr -> CHAR .)
    CHAR            reduce using rule 29 (expr -> CHAR .)
    BOOL            reduce using rule 29 (expr -> CHAR .)
    LOOP            reduce using rule 29 (expr -> CHAR .)
    IF              reduce using rule 29 (expr -> CHAR .)
    $end            reduce using rule 29 (expr -> CHAR .)
    LCURLY          reduce using rule 29 (expr -> CHAR .)
    RCURLY          reduce using rule 29 (expr -> CHAR .)
    RPARENTHESIS    reduce using rule 29 (expr -> CHAR .)


state 13

    (30) expr -> BOOL .

    DIVIDE          reduce using rule 30 (expr -> BOOL .)
    MULTIPLY        reduce using rule 30 (expr -> BOOL .)
    ADD             reduce using rule 30 (expr -> BOOL .)
    SUBTRACT        reduce using rule 30 (expr -> BOOL .)
    MODULUS         reduce using rule 30 (expr -> BOOL .)
    EEQUALS         reduce using rule 30 (expr -> BOOL .)
    GREATER         reduce using rule 30 (expr -> BOOL .)
    SMALLER         reduce using rule 30 (expr -> BOOL .)
    AND             reduce using rule 30 (expr -> BOOL .)
    OR              reduce using rule 30 (expr -> BOOL .)
    NOTEQUALS       reduce using rule 30 (expr -> BOOL .)
    GEQUAL          reduce using rule 30 (expr -> BOOL .)
    SEQUAL          reduce using rule 30 (expr -> BOOL .)
    INCREMENT       reduce using rule 30 (expr -> BOOL .)
    DECREMENT       reduce using rule 30 (expr -> BOOL .)
    ID              reduce using rule 30 (expr -> BOOL .)
    PRINT           reduce using rule 30 (expr -> BOOL .)
    INT             reduce using rule 30 (expr -> BOOL .)
    FLOAT           reduce using rule 30 (expr -> BOOL .)
    STRING          reduce using rule 30 (expr -> BOOL .)
    CHAR            reduce using rule 30 (expr -> BOOL .)
    BOOL            reduce using rule 30 (expr -> BOOL .)
    LOOP            reduce using rule 30 (expr -> BOOL .)
    IF              reduce using rule 30 (expr -> BOOL .)
    $end            reduce using rule 30 (expr -> BOOL .)
    LCURLY          reduce using rule 30 (expr -> BOOL .)
    RCURLY          reduce using rule 30 (expr -> BOOL .)
    RPARENTHESIS    reduce using rule 30 (expr -> BOOL .)


state 14

    (35) expr -> LOOP . LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    LPARENTHESIS    shift and go to state 36


state 15

    (33) ifstatement -> IF . expr LCURLY statement RCURLY
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    ID              shift and go to state 38
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14

    expr                           shift and go to state 37

state 16

    (3) statements -> statements statement .

    ID              reduce using rule 3 (statements -> statements statement .)
    PRINT           reduce using rule 3 (statements -> statements statement .)
    INT             reduce using rule 3 (statements -> statements statement .)
    FLOAT           reduce using rule 3 (statements -> statements statement .)
    STRING          reduce using rule 3 (statements -> statements statement .)
    CHAR            reduce using rule 3 (statements -> statements statement .)
    BOOL            reduce using rule 3 (statements -> statements statement .)
    LOOP            reduce using rule 3 (statements -> statements statement .)
    IF              reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    RCURLY          reduce using rule 3 (statements -> statements statement .)


state 17

    (6) statement -> ID EQUALS . expr
    (7) statement -> ID EQUALS . ID
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    ID              shift and go to state 39
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14

    expr                           shift and go to state 40

state 18

    (10) expr -> expr DIVIDE . expr
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    ID              shift and go to state 38
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14

    expr                           shift and go to state 41

state 19

    (11) expr -> expr MULTIPLY . expr
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    ID              shift and go to state 38
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14

    expr                           shift and go to state 42

state 20

    (12) expr -> expr ADD . expr
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    ID              shift and go to state 38
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14

    expr                           shift and go to state 43

state 21

    (13) expr -> expr SUBTRACT . expr
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    ID              shift and go to state 38
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14

    expr                           shift and go to state 44

state 22

    (14) expr -> expr MODULUS . expr
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    ID              shift and go to state 38
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14

    expr                           shift and go to state 45

state 23

    (15) expr -> expr EEQUALS . expr
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    ID              shift and go to state 38
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14

    expr                           shift and go to state 46

state 24

    (16) expr -> expr GREATER . expr
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    ID              shift and go to state 38
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14

    expr                           shift and go to state 47

state 25

    (17) expr -> expr SMALLER . expr
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    ID              shift and go to state 38
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14

    expr                           shift and go to state 48

state 26

    (18) expr -> expr AND . expr
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    ID              shift and go to state 38
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14

    expr                           shift and go to state 49

state 27

    (19) expr -> expr OR . expr
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    ID              shift and go to state 38
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14

    expr                           shift and go to state 50

state 28

    (20) expr -> expr NOTEQUALS . expr
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    ID              shift and go to state 38
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14

    expr                           shift and go to state 51

state 29

    (21) expr -> expr GEQUAL . expr
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    ID              shift and go to state 38
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14

    expr                           shift and go to state 52

state 30

    (22) expr -> expr SEQUAL . expr
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    ID              shift and go to state 38
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14

    expr                           shift and go to state 53

state 31

    (23) expr -> expr INCREMENT .

    DIVIDE          reduce using rule 23 (expr -> expr INCREMENT .)
    MULTIPLY        reduce using rule 23 (expr -> expr INCREMENT .)
    ADD             reduce using rule 23 (expr -> expr INCREMENT .)
    SUBTRACT        reduce using rule 23 (expr -> expr INCREMENT .)
    MODULUS         reduce using rule 23 (expr -> expr INCREMENT .)
    EEQUALS         reduce using rule 23 (expr -> expr INCREMENT .)
    GREATER         reduce using rule 23 (expr -> expr INCREMENT .)
    SMALLER         reduce using rule 23 (expr -> expr INCREMENT .)
    AND             reduce using rule 23 (expr -> expr INCREMENT .)
    OR              reduce using rule 23 (expr -> expr INCREMENT .)
    NOTEQUALS       reduce using rule 23 (expr -> expr INCREMENT .)
    GEQUAL          reduce using rule 23 (expr -> expr INCREMENT .)
    SEQUAL          reduce using rule 23 (expr -> expr INCREMENT .)
    INCREMENT       reduce using rule 23 (expr -> expr INCREMENT .)
    DECREMENT       reduce using rule 23 (expr -> expr INCREMENT .)
    ID              reduce using rule 23 (expr -> expr INCREMENT .)
    PRINT           reduce using rule 23 (expr -> expr INCREMENT .)
    INT             reduce using rule 23 (expr -> expr INCREMENT .)
    FLOAT           reduce using rule 23 (expr -> expr INCREMENT .)
    STRING          reduce using rule 23 (expr -> expr INCREMENT .)
    CHAR            reduce using rule 23 (expr -> expr INCREMENT .)
    BOOL            reduce using rule 23 (expr -> expr INCREMENT .)
    LOOP            reduce using rule 23 (expr -> expr INCREMENT .)
    IF              reduce using rule 23 (expr -> expr INCREMENT .)
    $end            reduce using rule 23 (expr -> expr INCREMENT .)
    LCURLY          reduce using rule 23 (expr -> expr INCREMENT .)
    RCURLY          reduce using rule 23 (expr -> expr INCREMENT .)
    RPARENTHESIS    reduce using rule 23 (expr -> expr INCREMENT .)


state 32

    (24) expr -> expr DECREMENT .

    DIVIDE          reduce using rule 24 (expr -> expr DECREMENT .)
    MULTIPLY        reduce using rule 24 (expr -> expr DECREMENT .)
    ADD             reduce using rule 24 (expr -> expr DECREMENT .)
    SUBTRACT        reduce using rule 24 (expr -> expr DECREMENT .)
    MODULUS         reduce using rule 24 (expr -> expr DECREMENT .)
    EEQUALS         reduce using rule 24 (expr -> expr DECREMENT .)
    GREATER         reduce using rule 24 (expr -> expr DECREMENT .)
    SMALLER         reduce using rule 24 (expr -> expr DECREMENT .)
    AND             reduce using rule 24 (expr -> expr DECREMENT .)
    OR              reduce using rule 24 (expr -> expr DECREMENT .)
    NOTEQUALS       reduce using rule 24 (expr -> expr DECREMENT .)
    GEQUAL          reduce using rule 24 (expr -> expr DECREMENT .)
    SEQUAL          reduce using rule 24 (expr -> expr DECREMENT .)
    INCREMENT       reduce using rule 24 (expr -> expr DECREMENT .)
    DECREMENT       reduce using rule 24 (expr -> expr DECREMENT .)
    ID              reduce using rule 24 (expr -> expr DECREMENT .)
    PRINT           reduce using rule 24 (expr -> expr DECREMENT .)
    INT             reduce using rule 24 (expr -> expr DECREMENT .)
    FLOAT           reduce using rule 24 (expr -> expr DECREMENT .)
    STRING          reduce using rule 24 (expr -> expr DECREMENT .)
    CHAR            reduce using rule 24 (expr -> expr DECREMENT .)
    BOOL            reduce using rule 24 (expr -> expr DECREMENT .)
    LOOP            reduce using rule 24 (expr -> expr DECREMENT .)
    IF              reduce using rule 24 (expr -> expr DECREMENT .)
    $end            reduce using rule 24 (expr -> expr DECREMENT .)
    LCURLY          reduce using rule 24 (expr -> expr DECREMENT .)
    RCURLY          reduce using rule 24 (expr -> expr DECREMENT .)
    RPARENTHESIS    reduce using rule 24 (expr -> expr DECREMENT .)


state 33

    (8) statement -> PRINT LPARENTHESIS . expr RPARENTHESIS
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    ID              shift and go to state 38
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14

    expr                           shift and go to state 54

state 34

    (32) statement -> ifstatement elsestatement .

    ID              reduce using rule 32 (statement -> ifstatement elsestatement .)
    PRINT           reduce using rule 32 (statement -> ifstatement elsestatement .)
    INT             reduce using rule 32 (statement -> ifstatement elsestatement .)
    FLOAT           reduce using rule 32 (statement -> ifstatement elsestatement .)
    STRING          reduce using rule 32 (statement -> ifstatement elsestatement .)
    CHAR            reduce using rule 32 (statement -> ifstatement elsestatement .)
    BOOL            reduce using rule 32 (statement -> ifstatement elsestatement .)
    LOOP            reduce using rule 32 (statement -> ifstatement elsestatement .)
    IF              reduce using rule 32 (statement -> ifstatement elsestatement .)
    $end            reduce using rule 32 (statement -> ifstatement elsestatement .)
    RCURLY          reduce using rule 32 (statement -> ifstatement elsestatement .)


state 35

    (34) elsestatement -> ELSE . LCURLY statement RCURLY

    LCURLY          shift and go to state 55


state 36

    (35) expr -> LOOP LPARENTHESIS . expr RPARENTHESIS LCURLY statements RCURLY
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY

    ID              shift and go to state 38
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14

    expr                           shift and go to state 56

state 37

    (33) ifstatement -> IF expr . LCURLY statement RCURLY
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

    LCURLY          shift and go to state 57
    DIVIDE          shift and go to state 18
    MULTIPLY        shift and go to state 19
    ADD             shift and go to state 20
    SUBTRACT        shift and go to state 21
    MODULUS         shift and go to state 22
    EEQUALS         shift and go to state 23
    GREATER         shift and go to state 24
    SMALLER         shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    NOTEQUALS       shift and go to state 28
    GEQUAL          shift and go to state 29
    SEQUAL          shift and go to state 30
    INCREMENT       shift and go to state 31
    DECREMENT       shift and go to state 32


state 38

    (25) expr -> ID .

    LCURLY          reduce using rule 25 (expr -> ID .)
    DIVIDE          reduce using rule 25 (expr -> ID .)
    MULTIPLY        reduce using rule 25 (expr -> ID .)
    ADD             reduce using rule 25 (expr -> ID .)
    SUBTRACT        reduce using rule 25 (expr -> ID .)
    MODULUS         reduce using rule 25 (expr -> ID .)
    EEQUALS         reduce using rule 25 (expr -> ID .)
    GREATER         reduce using rule 25 (expr -> ID .)
    SMALLER         reduce using rule 25 (expr -> ID .)
    AND             reduce using rule 25 (expr -> ID .)
    OR              reduce using rule 25 (expr -> ID .)
    NOTEQUALS       reduce using rule 25 (expr -> ID .)
    GEQUAL          reduce using rule 25 (expr -> ID .)
    SEQUAL          reduce using rule 25 (expr -> ID .)
    INCREMENT       reduce using rule 25 (expr -> ID .)
    DECREMENT       reduce using rule 25 (expr -> ID .)
    ID              reduce using rule 25 (expr -> ID .)
    PRINT           reduce using rule 25 (expr -> ID .)
    INT             reduce using rule 25 (expr -> ID .)
    FLOAT           reduce using rule 25 (expr -> ID .)
    STRING          reduce using rule 25 (expr -> ID .)
    CHAR            reduce using rule 25 (expr -> ID .)
    BOOL            reduce using rule 25 (expr -> ID .)
    LOOP            reduce using rule 25 (expr -> ID .)
    IF              reduce using rule 25 (expr -> ID .)
    $end            reduce using rule 25 (expr -> ID .)
    RCURLY          reduce using rule 25 (expr -> ID .)
    RPARENTHESIS    reduce using rule 25 (expr -> ID .)


state 39

    (7) statement -> ID EQUALS ID .
    (25) expr -> ID .

  ! reduce/reduce conflict for ID resolved using rule 7 (statement -> ID EQUALS ID .)
  ! reduce/reduce conflict for PRINT resolved using rule 7 (statement -> ID EQUALS ID .)
  ! reduce/reduce conflict for INT resolved using rule 7 (statement -> ID EQUALS ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 7 (statement -> ID EQUALS ID .)
  ! reduce/reduce conflict for STRING resolved using rule 7 (statement -> ID EQUALS ID .)
  ! reduce/reduce conflict for CHAR resolved using rule 7 (statement -> ID EQUALS ID .)
  ! reduce/reduce conflict for BOOL resolved using rule 7 (statement -> ID EQUALS ID .)
  ! reduce/reduce conflict for LOOP resolved using rule 7 (statement -> ID EQUALS ID .)
  ! reduce/reduce conflict for IF resolved using rule 7 (statement -> ID EQUALS ID .)
  ! reduce/reduce conflict for $end resolved using rule 7 (statement -> ID EQUALS ID .)
  ! reduce/reduce conflict for RCURLY resolved using rule 7 (statement -> ID EQUALS ID .)
    ID              reduce using rule 7 (statement -> ID EQUALS ID .)
    PRINT           reduce using rule 7 (statement -> ID EQUALS ID .)
    INT             reduce using rule 7 (statement -> ID EQUALS ID .)
    FLOAT           reduce using rule 7 (statement -> ID EQUALS ID .)
    STRING          reduce using rule 7 (statement -> ID EQUALS ID .)
    CHAR            reduce using rule 7 (statement -> ID EQUALS ID .)
    BOOL            reduce using rule 7 (statement -> ID EQUALS ID .)
    LOOP            reduce using rule 7 (statement -> ID EQUALS ID .)
    IF              reduce using rule 7 (statement -> ID EQUALS ID .)
    $end            reduce using rule 7 (statement -> ID EQUALS ID .)
    RCURLY          reduce using rule 7 (statement -> ID EQUALS ID .)
    DIVIDE          reduce using rule 25 (expr -> ID .)
    MULTIPLY        reduce using rule 25 (expr -> ID .)
    ADD             reduce using rule 25 (expr -> ID .)
    SUBTRACT        reduce using rule 25 (expr -> ID .)
    MODULUS         reduce using rule 25 (expr -> ID .)
    EEQUALS         reduce using rule 25 (expr -> ID .)
    GREATER         reduce using rule 25 (expr -> ID .)
    SMALLER         reduce using rule 25 (expr -> ID .)
    AND             reduce using rule 25 (expr -> ID .)
    OR              reduce using rule 25 (expr -> ID .)
    NOTEQUALS       reduce using rule 25 (expr -> ID .)
    GEQUAL          reduce using rule 25 (expr -> ID .)
    SEQUAL          reduce using rule 25 (expr -> ID .)
    INCREMENT       reduce using rule 25 (expr -> ID .)
    DECREMENT       reduce using rule 25 (expr -> ID .)

  ! ID              [ reduce using rule 25 (expr -> ID .) ]
  ! PRINT           [ reduce using rule 25 (expr -> ID .) ]
  ! INT             [ reduce using rule 25 (expr -> ID .) ]
  ! FLOAT           [ reduce using rule 25 (expr -> ID .) ]
  ! STRING          [ reduce using rule 25 (expr -> ID .) ]
  ! CHAR            [ reduce using rule 25 (expr -> ID .) ]
  ! BOOL            [ reduce using rule 25 (expr -> ID .) ]
  ! LOOP            [ reduce using rule 25 (expr -> ID .) ]
  ! IF              [ reduce using rule 25 (expr -> ID .) ]
  ! $end            [ reduce using rule 25 (expr -> ID .) ]
  ! RCURLY          [ reduce using rule 25 (expr -> ID .) ]


state 40

    (6) statement -> ID EQUALS expr .
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

    ID              reduce using rule 6 (statement -> ID EQUALS expr .)
    PRINT           reduce using rule 6 (statement -> ID EQUALS expr .)
    INT             reduce using rule 6 (statement -> ID EQUALS expr .)
    FLOAT           reduce using rule 6 (statement -> ID EQUALS expr .)
    STRING          reduce using rule 6 (statement -> ID EQUALS expr .)
    CHAR            reduce using rule 6 (statement -> ID EQUALS expr .)
    BOOL            reduce using rule 6 (statement -> ID EQUALS expr .)
    LOOP            reduce using rule 6 (statement -> ID EQUALS expr .)
    IF              reduce using rule 6 (statement -> ID EQUALS expr .)
    $end            reduce using rule 6 (statement -> ID EQUALS expr .)
    RCURLY          reduce using rule 6 (statement -> ID EQUALS expr .)
    DIVIDE          shift and go to state 18
    MULTIPLY        shift and go to state 19
    ADD             shift and go to state 20
    SUBTRACT        shift and go to state 21
    MODULUS         shift and go to state 22
    EEQUALS         shift and go to state 23
    GREATER         shift and go to state 24
    SMALLER         shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    NOTEQUALS       shift and go to state 28
    GEQUAL          shift and go to state 29
    SEQUAL          shift and go to state 30
    INCREMENT       shift and go to state 31
    DECREMENT       shift and go to state 32


state 41

    (10) expr -> expr DIVIDE expr .
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

    DIVIDE          reduce using rule 10 (expr -> expr DIVIDE expr .)
    MULTIPLY        reduce using rule 10 (expr -> expr DIVIDE expr .)
    ADD             reduce using rule 10 (expr -> expr DIVIDE expr .)
    SUBTRACT        reduce using rule 10 (expr -> expr DIVIDE expr .)
    MODULUS         reduce using rule 10 (expr -> expr DIVIDE expr .)
    EEQUALS         reduce using rule 10 (expr -> expr DIVIDE expr .)
    GREATER         reduce using rule 10 (expr -> expr DIVIDE expr .)
    SMALLER         reduce using rule 10 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 10 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 10 (expr -> expr DIVIDE expr .)
    NOTEQUALS       reduce using rule 10 (expr -> expr DIVIDE expr .)
    GEQUAL          reduce using rule 10 (expr -> expr DIVIDE expr .)
    SEQUAL          reduce using rule 10 (expr -> expr DIVIDE expr .)
    INCREMENT       reduce using rule 10 (expr -> expr DIVIDE expr .)
    DECREMENT       reduce using rule 10 (expr -> expr DIVIDE expr .)
    ID              reduce using rule 10 (expr -> expr DIVIDE expr .)
    PRINT           reduce using rule 10 (expr -> expr DIVIDE expr .)
    INT             reduce using rule 10 (expr -> expr DIVIDE expr .)
    FLOAT           reduce using rule 10 (expr -> expr DIVIDE expr .)
    STRING          reduce using rule 10 (expr -> expr DIVIDE expr .)
    CHAR            reduce using rule 10 (expr -> expr DIVIDE expr .)
    BOOL            reduce using rule 10 (expr -> expr DIVIDE expr .)
    LOOP            reduce using rule 10 (expr -> expr DIVIDE expr .)
    IF              reduce using rule 10 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 10 (expr -> expr DIVIDE expr .)
    LCURLY          reduce using rule 10 (expr -> expr DIVIDE expr .)
    RCURLY          reduce using rule 10 (expr -> expr DIVIDE expr .)
    RPARENTHESIS    reduce using rule 10 (expr -> expr DIVIDE expr .)

  ! DIVIDE          [ shift and go to state 18 ]
  ! MULTIPLY        [ shift and go to state 19 ]
  ! ADD             [ shift and go to state 20 ]
  ! SUBTRACT        [ shift and go to state 21 ]
  ! MODULUS         [ shift and go to state 22 ]
  ! EEQUALS         [ shift and go to state 23 ]
  ! GREATER         [ shift and go to state 24 ]
  ! SMALLER         [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! NOTEQUALS       [ shift and go to state 28 ]
  ! GEQUAL          [ shift and go to state 29 ]
  ! SEQUAL          [ shift and go to state 30 ]
  ! INCREMENT       [ shift and go to state 31 ]
  ! DECREMENT       [ shift and go to state 32 ]


state 42

    (11) expr -> expr MULTIPLY expr .
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

    DIVIDE          reduce using rule 11 (expr -> expr MULTIPLY expr .)
    MULTIPLY        reduce using rule 11 (expr -> expr MULTIPLY expr .)
    ADD             reduce using rule 11 (expr -> expr MULTIPLY expr .)
    SUBTRACT        reduce using rule 11 (expr -> expr MULTIPLY expr .)
    MODULUS         reduce using rule 11 (expr -> expr MULTIPLY expr .)
    EEQUALS         reduce using rule 11 (expr -> expr MULTIPLY expr .)
    GREATER         reduce using rule 11 (expr -> expr MULTIPLY expr .)
    SMALLER         reduce using rule 11 (expr -> expr MULTIPLY expr .)
    AND             reduce using rule 11 (expr -> expr MULTIPLY expr .)
    OR              reduce using rule 11 (expr -> expr MULTIPLY expr .)
    NOTEQUALS       reduce using rule 11 (expr -> expr MULTIPLY expr .)
    GEQUAL          reduce using rule 11 (expr -> expr MULTIPLY expr .)
    SEQUAL          reduce using rule 11 (expr -> expr MULTIPLY expr .)
    INCREMENT       reduce using rule 11 (expr -> expr MULTIPLY expr .)
    DECREMENT       reduce using rule 11 (expr -> expr MULTIPLY expr .)
    ID              reduce using rule 11 (expr -> expr MULTIPLY expr .)
    PRINT           reduce using rule 11 (expr -> expr MULTIPLY expr .)
    INT             reduce using rule 11 (expr -> expr MULTIPLY expr .)
    FLOAT           reduce using rule 11 (expr -> expr MULTIPLY expr .)
    STRING          reduce using rule 11 (expr -> expr MULTIPLY expr .)
    CHAR            reduce using rule 11 (expr -> expr MULTIPLY expr .)
    BOOL            reduce using rule 11 (expr -> expr MULTIPLY expr .)
    LOOP            reduce using rule 11 (expr -> expr MULTIPLY expr .)
    IF              reduce using rule 11 (expr -> expr MULTIPLY expr .)
    $end            reduce using rule 11 (expr -> expr MULTIPLY expr .)
    LCURLY          reduce using rule 11 (expr -> expr MULTIPLY expr .)
    RCURLY          reduce using rule 11 (expr -> expr MULTIPLY expr .)
    RPARENTHESIS    reduce using rule 11 (expr -> expr MULTIPLY expr .)

  ! DIVIDE          [ shift and go to state 18 ]
  ! MULTIPLY        [ shift and go to state 19 ]
  ! ADD             [ shift and go to state 20 ]
  ! SUBTRACT        [ shift and go to state 21 ]
  ! MODULUS         [ shift and go to state 22 ]
  ! EEQUALS         [ shift and go to state 23 ]
  ! GREATER         [ shift and go to state 24 ]
  ! SMALLER         [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! NOTEQUALS       [ shift and go to state 28 ]
  ! GEQUAL          [ shift and go to state 29 ]
  ! SEQUAL          [ shift and go to state 30 ]
  ! INCREMENT       [ shift and go to state 31 ]
  ! DECREMENT       [ shift and go to state 32 ]


state 43

    (12) expr -> expr ADD expr .
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

    ADD             reduce using rule 12 (expr -> expr ADD expr .)
    SUBTRACT        reduce using rule 12 (expr -> expr ADD expr .)
    EEQUALS         reduce using rule 12 (expr -> expr ADD expr .)
    GREATER         reduce using rule 12 (expr -> expr ADD expr .)
    SMALLER         reduce using rule 12 (expr -> expr ADD expr .)
    AND             reduce using rule 12 (expr -> expr ADD expr .)
    OR              reduce using rule 12 (expr -> expr ADD expr .)
    NOTEQUALS       reduce using rule 12 (expr -> expr ADD expr .)
    GEQUAL          reduce using rule 12 (expr -> expr ADD expr .)
    SEQUAL          reduce using rule 12 (expr -> expr ADD expr .)
    INCREMENT       reduce using rule 12 (expr -> expr ADD expr .)
    DECREMENT       reduce using rule 12 (expr -> expr ADD expr .)
    ID              reduce using rule 12 (expr -> expr ADD expr .)
    PRINT           reduce using rule 12 (expr -> expr ADD expr .)
    INT             reduce using rule 12 (expr -> expr ADD expr .)
    FLOAT           reduce using rule 12 (expr -> expr ADD expr .)
    STRING          reduce using rule 12 (expr -> expr ADD expr .)
    CHAR            reduce using rule 12 (expr -> expr ADD expr .)
    BOOL            reduce using rule 12 (expr -> expr ADD expr .)
    LOOP            reduce using rule 12 (expr -> expr ADD expr .)
    IF              reduce using rule 12 (expr -> expr ADD expr .)
    $end            reduce using rule 12 (expr -> expr ADD expr .)
    LCURLY          reduce using rule 12 (expr -> expr ADD expr .)
    RCURLY          reduce using rule 12 (expr -> expr ADD expr .)
    RPARENTHESIS    reduce using rule 12 (expr -> expr ADD expr .)
    DIVIDE          shift and go to state 18
    MULTIPLY        shift and go to state 19
    MODULUS         shift and go to state 22

  ! DIVIDE          [ reduce using rule 12 (expr -> expr ADD expr .) ]
  ! MULTIPLY        [ reduce using rule 12 (expr -> expr ADD expr .) ]
  ! MODULUS         [ reduce using rule 12 (expr -> expr ADD expr .) ]
  ! ADD             [ shift and go to state 20 ]
  ! SUBTRACT        [ shift and go to state 21 ]
  ! EEQUALS         [ shift and go to state 23 ]
  ! GREATER         [ shift and go to state 24 ]
  ! SMALLER         [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! NOTEQUALS       [ shift and go to state 28 ]
  ! GEQUAL          [ shift and go to state 29 ]
  ! SEQUAL          [ shift and go to state 30 ]
  ! INCREMENT       [ shift and go to state 31 ]
  ! DECREMENT       [ shift and go to state 32 ]


state 44

    (13) expr -> expr SUBTRACT expr .
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

    ADD             reduce using rule 13 (expr -> expr SUBTRACT expr .)
    SUBTRACT        reduce using rule 13 (expr -> expr SUBTRACT expr .)
    EEQUALS         reduce using rule 13 (expr -> expr SUBTRACT expr .)
    GREATER         reduce using rule 13 (expr -> expr SUBTRACT expr .)
    SMALLER         reduce using rule 13 (expr -> expr SUBTRACT expr .)
    AND             reduce using rule 13 (expr -> expr SUBTRACT expr .)
    OR              reduce using rule 13 (expr -> expr SUBTRACT expr .)
    NOTEQUALS       reduce using rule 13 (expr -> expr SUBTRACT expr .)
    GEQUAL          reduce using rule 13 (expr -> expr SUBTRACT expr .)
    SEQUAL          reduce using rule 13 (expr -> expr SUBTRACT expr .)
    INCREMENT       reduce using rule 13 (expr -> expr SUBTRACT expr .)
    DECREMENT       reduce using rule 13 (expr -> expr SUBTRACT expr .)
    ID              reduce using rule 13 (expr -> expr SUBTRACT expr .)
    PRINT           reduce using rule 13 (expr -> expr SUBTRACT expr .)
    INT             reduce using rule 13 (expr -> expr SUBTRACT expr .)
    FLOAT           reduce using rule 13 (expr -> expr SUBTRACT expr .)
    STRING          reduce using rule 13 (expr -> expr SUBTRACT expr .)
    CHAR            reduce using rule 13 (expr -> expr SUBTRACT expr .)
    BOOL            reduce using rule 13 (expr -> expr SUBTRACT expr .)
    LOOP            reduce using rule 13 (expr -> expr SUBTRACT expr .)
    IF              reduce using rule 13 (expr -> expr SUBTRACT expr .)
    $end            reduce using rule 13 (expr -> expr SUBTRACT expr .)
    LCURLY          reduce using rule 13 (expr -> expr SUBTRACT expr .)
    RCURLY          reduce using rule 13 (expr -> expr SUBTRACT expr .)
    RPARENTHESIS    reduce using rule 13 (expr -> expr SUBTRACT expr .)
    DIVIDE          shift and go to state 18
    MULTIPLY        shift and go to state 19
    MODULUS         shift and go to state 22

  ! DIVIDE          [ reduce using rule 13 (expr -> expr SUBTRACT expr .) ]
  ! MULTIPLY        [ reduce using rule 13 (expr -> expr SUBTRACT expr .) ]
  ! MODULUS         [ reduce using rule 13 (expr -> expr SUBTRACT expr .) ]
  ! ADD             [ shift and go to state 20 ]
  ! SUBTRACT        [ shift and go to state 21 ]
  ! EEQUALS         [ shift and go to state 23 ]
  ! GREATER         [ shift and go to state 24 ]
  ! SMALLER         [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! NOTEQUALS       [ shift and go to state 28 ]
  ! GEQUAL          [ shift and go to state 29 ]
  ! SEQUAL          [ shift and go to state 30 ]
  ! INCREMENT       [ shift and go to state 31 ]
  ! DECREMENT       [ shift and go to state 32 ]


state 45

    (14) expr -> expr MODULUS expr .
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

    DIVIDE          reduce using rule 14 (expr -> expr MODULUS expr .)
    MULTIPLY        reduce using rule 14 (expr -> expr MODULUS expr .)
    ADD             reduce using rule 14 (expr -> expr MODULUS expr .)
    SUBTRACT        reduce using rule 14 (expr -> expr MODULUS expr .)
    MODULUS         reduce using rule 14 (expr -> expr MODULUS expr .)
    EEQUALS         reduce using rule 14 (expr -> expr MODULUS expr .)
    GREATER         reduce using rule 14 (expr -> expr MODULUS expr .)
    SMALLER         reduce using rule 14 (expr -> expr MODULUS expr .)
    AND             reduce using rule 14 (expr -> expr MODULUS expr .)
    OR              reduce using rule 14 (expr -> expr MODULUS expr .)
    NOTEQUALS       reduce using rule 14 (expr -> expr MODULUS expr .)
    GEQUAL          reduce using rule 14 (expr -> expr MODULUS expr .)
    SEQUAL          reduce using rule 14 (expr -> expr MODULUS expr .)
    INCREMENT       reduce using rule 14 (expr -> expr MODULUS expr .)
    DECREMENT       reduce using rule 14 (expr -> expr MODULUS expr .)
    ID              reduce using rule 14 (expr -> expr MODULUS expr .)
    PRINT           reduce using rule 14 (expr -> expr MODULUS expr .)
    INT             reduce using rule 14 (expr -> expr MODULUS expr .)
    FLOAT           reduce using rule 14 (expr -> expr MODULUS expr .)
    STRING          reduce using rule 14 (expr -> expr MODULUS expr .)
    CHAR            reduce using rule 14 (expr -> expr MODULUS expr .)
    BOOL            reduce using rule 14 (expr -> expr MODULUS expr .)
    LOOP            reduce using rule 14 (expr -> expr MODULUS expr .)
    IF              reduce using rule 14 (expr -> expr MODULUS expr .)
    $end            reduce using rule 14 (expr -> expr MODULUS expr .)
    LCURLY          reduce using rule 14 (expr -> expr MODULUS expr .)
    RCURLY          reduce using rule 14 (expr -> expr MODULUS expr .)
    RPARENTHESIS    reduce using rule 14 (expr -> expr MODULUS expr .)

  ! DIVIDE          [ shift and go to state 18 ]
  ! MULTIPLY        [ shift and go to state 19 ]
  ! ADD             [ shift and go to state 20 ]
  ! SUBTRACT        [ shift and go to state 21 ]
  ! MODULUS         [ shift and go to state 22 ]
  ! EEQUALS         [ shift and go to state 23 ]
  ! GREATER         [ shift and go to state 24 ]
  ! SMALLER         [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! NOTEQUALS       [ shift and go to state 28 ]
  ! GEQUAL          [ shift and go to state 29 ]
  ! SEQUAL          [ shift and go to state 30 ]
  ! INCREMENT       [ shift and go to state 31 ]
  ! DECREMENT       [ shift and go to state 32 ]


state 46

    (15) expr -> expr EEQUALS expr .
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for EEQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for GEQUAL resolved as shift
  ! shift/reduce conflict for SEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    ID              reduce using rule 15 (expr -> expr EEQUALS expr .)
    PRINT           reduce using rule 15 (expr -> expr EEQUALS expr .)
    INT             reduce using rule 15 (expr -> expr EEQUALS expr .)
    FLOAT           reduce using rule 15 (expr -> expr EEQUALS expr .)
    STRING          reduce using rule 15 (expr -> expr EEQUALS expr .)
    CHAR            reduce using rule 15 (expr -> expr EEQUALS expr .)
    BOOL            reduce using rule 15 (expr -> expr EEQUALS expr .)
    LOOP            reduce using rule 15 (expr -> expr EEQUALS expr .)
    IF              reduce using rule 15 (expr -> expr EEQUALS expr .)
    $end            reduce using rule 15 (expr -> expr EEQUALS expr .)
    LCURLY          reduce using rule 15 (expr -> expr EEQUALS expr .)
    RCURLY          reduce using rule 15 (expr -> expr EEQUALS expr .)
    RPARENTHESIS    reduce using rule 15 (expr -> expr EEQUALS expr .)
    DIVIDE          shift and go to state 18
    MULTIPLY        shift and go to state 19
    ADD             shift and go to state 20
    SUBTRACT        shift and go to state 21
    MODULUS         shift and go to state 22
    EEQUALS         shift and go to state 23
    GREATER         shift and go to state 24
    SMALLER         shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    NOTEQUALS       shift and go to state 28
    GEQUAL          shift and go to state 29
    SEQUAL          shift and go to state 30
    INCREMENT       shift and go to state 31
    DECREMENT       shift and go to state 32

  ! DIVIDE          [ reduce using rule 15 (expr -> expr EEQUALS expr .) ]
  ! MULTIPLY        [ reduce using rule 15 (expr -> expr EEQUALS expr .) ]
  ! ADD             [ reduce using rule 15 (expr -> expr EEQUALS expr .) ]
  ! SUBTRACT        [ reduce using rule 15 (expr -> expr EEQUALS expr .) ]
  ! MODULUS         [ reduce using rule 15 (expr -> expr EEQUALS expr .) ]
  ! EEQUALS         [ reduce using rule 15 (expr -> expr EEQUALS expr .) ]
  ! GREATER         [ reduce using rule 15 (expr -> expr EEQUALS expr .) ]
  ! SMALLER         [ reduce using rule 15 (expr -> expr EEQUALS expr .) ]
  ! AND             [ reduce using rule 15 (expr -> expr EEQUALS expr .) ]
  ! OR              [ reduce using rule 15 (expr -> expr EEQUALS expr .) ]
  ! NOTEQUALS       [ reduce using rule 15 (expr -> expr EEQUALS expr .) ]
  ! GEQUAL          [ reduce using rule 15 (expr -> expr EEQUALS expr .) ]
  ! SEQUAL          [ reduce using rule 15 (expr -> expr EEQUALS expr .) ]
  ! INCREMENT       [ reduce using rule 15 (expr -> expr EEQUALS expr .) ]
  ! DECREMENT       [ reduce using rule 15 (expr -> expr EEQUALS expr .) ]


state 47

    (16) expr -> expr GREATER expr .
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

    EEQUALS         reduce using rule 16 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 16 (expr -> expr GREATER expr .)
    SMALLER         reduce using rule 16 (expr -> expr GREATER expr .)
    AND             reduce using rule 16 (expr -> expr GREATER expr .)
    OR              reduce using rule 16 (expr -> expr GREATER expr .)
    NOTEQUALS       reduce using rule 16 (expr -> expr GREATER expr .)
    GEQUAL          reduce using rule 16 (expr -> expr GREATER expr .)
    SEQUAL          reduce using rule 16 (expr -> expr GREATER expr .)
    INCREMENT       reduce using rule 16 (expr -> expr GREATER expr .)
    DECREMENT       reduce using rule 16 (expr -> expr GREATER expr .)
    ID              reduce using rule 16 (expr -> expr GREATER expr .)
    PRINT           reduce using rule 16 (expr -> expr GREATER expr .)
    INT             reduce using rule 16 (expr -> expr GREATER expr .)
    FLOAT           reduce using rule 16 (expr -> expr GREATER expr .)
    STRING          reduce using rule 16 (expr -> expr GREATER expr .)
    CHAR            reduce using rule 16 (expr -> expr GREATER expr .)
    BOOL            reduce using rule 16 (expr -> expr GREATER expr .)
    LOOP            reduce using rule 16 (expr -> expr GREATER expr .)
    IF              reduce using rule 16 (expr -> expr GREATER expr .)
    $end            reduce using rule 16 (expr -> expr GREATER expr .)
    LCURLY          reduce using rule 16 (expr -> expr GREATER expr .)
    RCURLY          reduce using rule 16 (expr -> expr GREATER expr .)
    RPARENTHESIS    reduce using rule 16 (expr -> expr GREATER expr .)
    DIVIDE          shift and go to state 18
    MULTIPLY        shift and go to state 19
    ADD             shift and go to state 20
    SUBTRACT        shift and go to state 21
    MODULUS         shift and go to state 22

  ! DIVIDE          [ reduce using rule 16 (expr -> expr GREATER expr .) ]
  ! MULTIPLY        [ reduce using rule 16 (expr -> expr GREATER expr .) ]
  ! ADD             [ reduce using rule 16 (expr -> expr GREATER expr .) ]
  ! SUBTRACT        [ reduce using rule 16 (expr -> expr GREATER expr .) ]
  ! MODULUS         [ reduce using rule 16 (expr -> expr GREATER expr .) ]
  ! EEQUALS         [ shift and go to state 23 ]
  ! GREATER         [ shift and go to state 24 ]
  ! SMALLER         [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! NOTEQUALS       [ shift and go to state 28 ]
  ! GEQUAL          [ shift and go to state 29 ]
  ! SEQUAL          [ shift and go to state 30 ]
  ! INCREMENT       [ shift and go to state 31 ]
  ! DECREMENT       [ shift and go to state 32 ]


state 48

    (17) expr -> expr SMALLER expr .
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

    EEQUALS         reduce using rule 17 (expr -> expr SMALLER expr .)
    GREATER         reduce using rule 17 (expr -> expr SMALLER expr .)
    SMALLER         reduce using rule 17 (expr -> expr SMALLER expr .)
    AND             reduce using rule 17 (expr -> expr SMALLER expr .)
    OR              reduce using rule 17 (expr -> expr SMALLER expr .)
    NOTEQUALS       reduce using rule 17 (expr -> expr SMALLER expr .)
    GEQUAL          reduce using rule 17 (expr -> expr SMALLER expr .)
    SEQUAL          reduce using rule 17 (expr -> expr SMALLER expr .)
    INCREMENT       reduce using rule 17 (expr -> expr SMALLER expr .)
    DECREMENT       reduce using rule 17 (expr -> expr SMALLER expr .)
    ID              reduce using rule 17 (expr -> expr SMALLER expr .)
    PRINT           reduce using rule 17 (expr -> expr SMALLER expr .)
    INT             reduce using rule 17 (expr -> expr SMALLER expr .)
    FLOAT           reduce using rule 17 (expr -> expr SMALLER expr .)
    STRING          reduce using rule 17 (expr -> expr SMALLER expr .)
    CHAR            reduce using rule 17 (expr -> expr SMALLER expr .)
    BOOL            reduce using rule 17 (expr -> expr SMALLER expr .)
    LOOP            reduce using rule 17 (expr -> expr SMALLER expr .)
    IF              reduce using rule 17 (expr -> expr SMALLER expr .)
    $end            reduce using rule 17 (expr -> expr SMALLER expr .)
    LCURLY          reduce using rule 17 (expr -> expr SMALLER expr .)
    RCURLY          reduce using rule 17 (expr -> expr SMALLER expr .)
    RPARENTHESIS    reduce using rule 17 (expr -> expr SMALLER expr .)
    DIVIDE          shift and go to state 18
    MULTIPLY        shift and go to state 19
    ADD             shift and go to state 20
    SUBTRACT        shift and go to state 21
    MODULUS         shift and go to state 22

  ! DIVIDE          [ reduce using rule 17 (expr -> expr SMALLER expr .) ]
  ! MULTIPLY        [ reduce using rule 17 (expr -> expr SMALLER expr .) ]
  ! ADD             [ reduce using rule 17 (expr -> expr SMALLER expr .) ]
  ! SUBTRACT        [ reduce using rule 17 (expr -> expr SMALLER expr .) ]
  ! MODULUS         [ reduce using rule 17 (expr -> expr SMALLER expr .) ]
  ! EEQUALS         [ shift and go to state 23 ]
  ! GREATER         [ shift and go to state 24 ]
  ! SMALLER         [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! NOTEQUALS       [ shift and go to state 28 ]
  ! GEQUAL          [ shift and go to state 29 ]
  ! SEQUAL          [ shift and go to state 30 ]
  ! INCREMENT       [ shift and go to state 31 ]
  ! DECREMENT       [ shift and go to state 32 ]


state 49

    (18) expr -> expr AND expr .
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

    EEQUALS         reduce using rule 18 (expr -> expr AND expr .)
    AND             reduce using rule 18 (expr -> expr AND expr .)
    OR              reduce using rule 18 (expr -> expr AND expr .)
    NOTEQUALS       reduce using rule 18 (expr -> expr AND expr .)
    INCREMENT       reduce using rule 18 (expr -> expr AND expr .)
    DECREMENT       reduce using rule 18 (expr -> expr AND expr .)
    ID              reduce using rule 18 (expr -> expr AND expr .)
    PRINT           reduce using rule 18 (expr -> expr AND expr .)
    INT             reduce using rule 18 (expr -> expr AND expr .)
    FLOAT           reduce using rule 18 (expr -> expr AND expr .)
    STRING          reduce using rule 18 (expr -> expr AND expr .)
    CHAR            reduce using rule 18 (expr -> expr AND expr .)
    BOOL            reduce using rule 18 (expr -> expr AND expr .)
    LOOP            reduce using rule 18 (expr -> expr AND expr .)
    IF              reduce using rule 18 (expr -> expr AND expr .)
    $end            reduce using rule 18 (expr -> expr AND expr .)
    LCURLY          reduce using rule 18 (expr -> expr AND expr .)
    RCURLY          reduce using rule 18 (expr -> expr AND expr .)
    RPARENTHESIS    reduce using rule 18 (expr -> expr AND expr .)
    DIVIDE          shift and go to state 18
    MULTIPLY        shift and go to state 19
    ADD             shift and go to state 20
    SUBTRACT        shift and go to state 21
    MODULUS         shift and go to state 22
    GREATER         shift and go to state 24
    SMALLER         shift and go to state 25
    GEQUAL          shift and go to state 29
    SEQUAL          shift and go to state 30

  ! DIVIDE          [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! MULTIPLY        [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! ADD             [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! SUBTRACT        [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! MODULUS         [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! GREATER         [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! SMALLER         [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! GEQUAL          [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! SEQUAL          [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! EEQUALS         [ shift and go to state 23 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! NOTEQUALS       [ shift and go to state 28 ]
  ! INCREMENT       [ shift and go to state 31 ]
  ! DECREMENT       [ shift and go to state 32 ]


state 50

    (19) expr -> expr OR expr .
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

    EEQUALS         reduce using rule 19 (expr -> expr OR expr .)
    AND             reduce using rule 19 (expr -> expr OR expr .)
    OR              reduce using rule 19 (expr -> expr OR expr .)
    NOTEQUALS       reduce using rule 19 (expr -> expr OR expr .)
    INCREMENT       reduce using rule 19 (expr -> expr OR expr .)
    DECREMENT       reduce using rule 19 (expr -> expr OR expr .)
    ID              reduce using rule 19 (expr -> expr OR expr .)
    PRINT           reduce using rule 19 (expr -> expr OR expr .)
    INT             reduce using rule 19 (expr -> expr OR expr .)
    FLOAT           reduce using rule 19 (expr -> expr OR expr .)
    STRING          reduce using rule 19 (expr -> expr OR expr .)
    CHAR            reduce using rule 19 (expr -> expr OR expr .)
    BOOL            reduce using rule 19 (expr -> expr OR expr .)
    LOOP            reduce using rule 19 (expr -> expr OR expr .)
    IF              reduce using rule 19 (expr -> expr OR expr .)
    $end            reduce using rule 19 (expr -> expr OR expr .)
    LCURLY          reduce using rule 19 (expr -> expr OR expr .)
    RCURLY          reduce using rule 19 (expr -> expr OR expr .)
    RPARENTHESIS    reduce using rule 19 (expr -> expr OR expr .)
    DIVIDE          shift and go to state 18
    MULTIPLY        shift and go to state 19
    ADD             shift and go to state 20
    SUBTRACT        shift and go to state 21
    MODULUS         shift and go to state 22
    GREATER         shift and go to state 24
    SMALLER         shift and go to state 25
    GEQUAL          shift and go to state 29
    SEQUAL          shift and go to state 30

  ! DIVIDE          [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! MULTIPLY        [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! ADD             [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! SUBTRACT        [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! MODULUS         [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! GREATER         [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! SMALLER         [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! GEQUAL          [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! SEQUAL          [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! EEQUALS         [ shift and go to state 23 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! NOTEQUALS       [ shift and go to state 28 ]
  ! INCREMENT       [ shift and go to state 31 ]
  ! DECREMENT       [ shift and go to state 32 ]


state 51

    (20) expr -> expr NOTEQUALS expr .
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for EEQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for GEQUAL resolved as shift
  ! shift/reduce conflict for SEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    ID              reduce using rule 20 (expr -> expr NOTEQUALS expr .)
    PRINT           reduce using rule 20 (expr -> expr NOTEQUALS expr .)
    INT             reduce using rule 20 (expr -> expr NOTEQUALS expr .)
    FLOAT           reduce using rule 20 (expr -> expr NOTEQUALS expr .)
    STRING          reduce using rule 20 (expr -> expr NOTEQUALS expr .)
    CHAR            reduce using rule 20 (expr -> expr NOTEQUALS expr .)
    BOOL            reduce using rule 20 (expr -> expr NOTEQUALS expr .)
    LOOP            reduce using rule 20 (expr -> expr NOTEQUALS expr .)
    IF              reduce using rule 20 (expr -> expr NOTEQUALS expr .)
    $end            reduce using rule 20 (expr -> expr NOTEQUALS expr .)
    LCURLY          reduce using rule 20 (expr -> expr NOTEQUALS expr .)
    RCURLY          reduce using rule 20 (expr -> expr NOTEQUALS expr .)
    RPARENTHESIS    reduce using rule 20 (expr -> expr NOTEQUALS expr .)
    DIVIDE          shift and go to state 18
    MULTIPLY        shift and go to state 19
    ADD             shift and go to state 20
    SUBTRACT        shift and go to state 21
    MODULUS         shift and go to state 22
    EEQUALS         shift and go to state 23
    GREATER         shift and go to state 24
    SMALLER         shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    NOTEQUALS       shift and go to state 28
    GEQUAL          shift and go to state 29
    SEQUAL          shift and go to state 30
    INCREMENT       shift and go to state 31
    DECREMENT       shift and go to state 32

  ! DIVIDE          [ reduce using rule 20 (expr -> expr NOTEQUALS expr .) ]
  ! MULTIPLY        [ reduce using rule 20 (expr -> expr NOTEQUALS expr .) ]
  ! ADD             [ reduce using rule 20 (expr -> expr NOTEQUALS expr .) ]
  ! SUBTRACT        [ reduce using rule 20 (expr -> expr NOTEQUALS expr .) ]
  ! MODULUS         [ reduce using rule 20 (expr -> expr NOTEQUALS expr .) ]
  ! EEQUALS         [ reduce using rule 20 (expr -> expr NOTEQUALS expr .) ]
  ! GREATER         [ reduce using rule 20 (expr -> expr NOTEQUALS expr .) ]
  ! SMALLER         [ reduce using rule 20 (expr -> expr NOTEQUALS expr .) ]
  ! AND             [ reduce using rule 20 (expr -> expr NOTEQUALS expr .) ]
  ! OR              [ reduce using rule 20 (expr -> expr NOTEQUALS expr .) ]
  ! NOTEQUALS       [ reduce using rule 20 (expr -> expr NOTEQUALS expr .) ]
  ! GEQUAL          [ reduce using rule 20 (expr -> expr NOTEQUALS expr .) ]
  ! SEQUAL          [ reduce using rule 20 (expr -> expr NOTEQUALS expr .) ]
  ! INCREMENT       [ reduce using rule 20 (expr -> expr NOTEQUALS expr .) ]
  ! DECREMENT       [ reduce using rule 20 (expr -> expr NOTEQUALS expr .) ]


state 52

    (21) expr -> expr GEQUAL expr .
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

    EEQUALS         reduce using rule 21 (expr -> expr GEQUAL expr .)
    GREATER         reduce using rule 21 (expr -> expr GEQUAL expr .)
    SMALLER         reduce using rule 21 (expr -> expr GEQUAL expr .)
    AND             reduce using rule 21 (expr -> expr GEQUAL expr .)
    OR              reduce using rule 21 (expr -> expr GEQUAL expr .)
    NOTEQUALS       reduce using rule 21 (expr -> expr GEQUAL expr .)
    GEQUAL          reduce using rule 21 (expr -> expr GEQUAL expr .)
    SEQUAL          reduce using rule 21 (expr -> expr GEQUAL expr .)
    INCREMENT       reduce using rule 21 (expr -> expr GEQUAL expr .)
    DECREMENT       reduce using rule 21 (expr -> expr GEQUAL expr .)
    ID              reduce using rule 21 (expr -> expr GEQUAL expr .)
    PRINT           reduce using rule 21 (expr -> expr GEQUAL expr .)
    INT             reduce using rule 21 (expr -> expr GEQUAL expr .)
    FLOAT           reduce using rule 21 (expr -> expr GEQUAL expr .)
    STRING          reduce using rule 21 (expr -> expr GEQUAL expr .)
    CHAR            reduce using rule 21 (expr -> expr GEQUAL expr .)
    BOOL            reduce using rule 21 (expr -> expr GEQUAL expr .)
    LOOP            reduce using rule 21 (expr -> expr GEQUAL expr .)
    IF              reduce using rule 21 (expr -> expr GEQUAL expr .)
    $end            reduce using rule 21 (expr -> expr GEQUAL expr .)
    LCURLY          reduce using rule 21 (expr -> expr GEQUAL expr .)
    RCURLY          reduce using rule 21 (expr -> expr GEQUAL expr .)
    RPARENTHESIS    reduce using rule 21 (expr -> expr GEQUAL expr .)
    DIVIDE          shift and go to state 18
    MULTIPLY        shift and go to state 19
    ADD             shift and go to state 20
    SUBTRACT        shift and go to state 21
    MODULUS         shift and go to state 22

  ! DIVIDE          [ reduce using rule 21 (expr -> expr GEQUAL expr .) ]
  ! MULTIPLY        [ reduce using rule 21 (expr -> expr GEQUAL expr .) ]
  ! ADD             [ reduce using rule 21 (expr -> expr GEQUAL expr .) ]
  ! SUBTRACT        [ reduce using rule 21 (expr -> expr GEQUAL expr .) ]
  ! MODULUS         [ reduce using rule 21 (expr -> expr GEQUAL expr .) ]
  ! EEQUALS         [ shift and go to state 23 ]
  ! GREATER         [ shift and go to state 24 ]
  ! SMALLER         [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! NOTEQUALS       [ shift and go to state 28 ]
  ! GEQUAL          [ shift and go to state 29 ]
  ! SEQUAL          [ shift and go to state 30 ]
  ! INCREMENT       [ shift and go to state 31 ]
  ! DECREMENT       [ shift and go to state 32 ]


state 53

    (22) expr -> expr SEQUAL expr .
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

    EEQUALS         reduce using rule 22 (expr -> expr SEQUAL expr .)
    GREATER         reduce using rule 22 (expr -> expr SEQUAL expr .)
    SMALLER         reduce using rule 22 (expr -> expr SEQUAL expr .)
    AND             reduce using rule 22 (expr -> expr SEQUAL expr .)
    OR              reduce using rule 22 (expr -> expr SEQUAL expr .)
    NOTEQUALS       reduce using rule 22 (expr -> expr SEQUAL expr .)
    GEQUAL          reduce using rule 22 (expr -> expr SEQUAL expr .)
    SEQUAL          reduce using rule 22 (expr -> expr SEQUAL expr .)
    INCREMENT       reduce using rule 22 (expr -> expr SEQUAL expr .)
    DECREMENT       reduce using rule 22 (expr -> expr SEQUAL expr .)
    ID              reduce using rule 22 (expr -> expr SEQUAL expr .)
    PRINT           reduce using rule 22 (expr -> expr SEQUAL expr .)
    INT             reduce using rule 22 (expr -> expr SEQUAL expr .)
    FLOAT           reduce using rule 22 (expr -> expr SEQUAL expr .)
    STRING          reduce using rule 22 (expr -> expr SEQUAL expr .)
    CHAR            reduce using rule 22 (expr -> expr SEQUAL expr .)
    BOOL            reduce using rule 22 (expr -> expr SEQUAL expr .)
    LOOP            reduce using rule 22 (expr -> expr SEQUAL expr .)
    IF              reduce using rule 22 (expr -> expr SEQUAL expr .)
    $end            reduce using rule 22 (expr -> expr SEQUAL expr .)
    LCURLY          reduce using rule 22 (expr -> expr SEQUAL expr .)
    RCURLY          reduce using rule 22 (expr -> expr SEQUAL expr .)
    RPARENTHESIS    reduce using rule 22 (expr -> expr SEQUAL expr .)
    DIVIDE          shift and go to state 18
    MULTIPLY        shift and go to state 19
    ADD             shift and go to state 20
    SUBTRACT        shift and go to state 21
    MODULUS         shift and go to state 22

  ! DIVIDE          [ reduce using rule 22 (expr -> expr SEQUAL expr .) ]
  ! MULTIPLY        [ reduce using rule 22 (expr -> expr SEQUAL expr .) ]
  ! ADD             [ reduce using rule 22 (expr -> expr SEQUAL expr .) ]
  ! SUBTRACT        [ reduce using rule 22 (expr -> expr SEQUAL expr .) ]
  ! MODULUS         [ reduce using rule 22 (expr -> expr SEQUAL expr .) ]
  ! EEQUALS         [ shift and go to state 23 ]
  ! GREATER         [ shift and go to state 24 ]
  ! SMALLER         [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! NOTEQUALS       [ shift and go to state 28 ]
  ! GEQUAL          [ shift and go to state 29 ]
  ! SEQUAL          [ shift and go to state 30 ]
  ! INCREMENT       [ shift and go to state 31 ]
  ! DECREMENT       [ shift and go to state 32 ]


state 54

    (8) statement -> PRINT LPARENTHESIS expr . RPARENTHESIS
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

    RPARENTHESIS    shift and go to state 58
    DIVIDE          shift and go to state 18
    MULTIPLY        shift and go to state 19
    ADD             shift and go to state 20
    SUBTRACT        shift and go to state 21
    MODULUS         shift and go to state 22
    EEQUALS         shift and go to state 23
    GREATER         shift and go to state 24
    SMALLER         shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    NOTEQUALS       shift and go to state 28
    GEQUAL          shift and go to state 29
    SEQUAL          shift and go to state 30
    INCREMENT       shift and go to state 31
    DECREMENT       shift and go to state 32


state 55

    (34) elsestatement -> ELSE LCURLY . statement RCURLY
    (6) statement -> . ID EQUALS expr
    (7) statement -> . ID EQUALS ID
    (8) statement -> . PRINT LPARENTHESIS expr RPARENTHESIS
    (9) statement -> . expr
    (31) statement -> . ifstatement
    (32) statement -> . ifstatement elsestatement
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY
    (33) ifstatement -> . IF expr LCURLY statement RCURLY

    ID              shift and go to state 5
    PRINT           shift and go to state 7
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14
    IF              shift and go to state 15

    statement                      shift and go to state 59
    expr                           shift and go to state 6
    ifstatement                    shift and go to state 8

state 56

    (35) expr -> LOOP LPARENTHESIS expr . RPARENTHESIS LCURLY statements RCURLY
    (10) expr -> expr . DIVIDE expr
    (11) expr -> expr . MULTIPLY expr
    (12) expr -> expr . ADD expr
    (13) expr -> expr . SUBTRACT expr
    (14) expr -> expr . MODULUS expr
    (15) expr -> expr . EEQUALS expr
    (16) expr -> expr . GREATER expr
    (17) expr -> expr . SMALLER expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (20) expr -> expr . NOTEQUALS expr
    (21) expr -> expr . GEQUAL expr
    (22) expr -> expr . SEQUAL expr
    (23) expr -> expr . INCREMENT
    (24) expr -> expr . DECREMENT

    RPARENTHESIS    shift and go to state 60
    DIVIDE          shift and go to state 18
    MULTIPLY        shift and go to state 19
    ADD             shift and go to state 20
    SUBTRACT        shift and go to state 21
    MODULUS         shift and go to state 22
    EEQUALS         shift and go to state 23
    GREATER         shift and go to state 24
    SMALLER         shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    NOTEQUALS       shift and go to state 28
    GEQUAL          shift and go to state 29
    SEQUAL          shift and go to state 30
    INCREMENT       shift and go to state 31
    DECREMENT       shift and go to state 32


state 57

    (33) ifstatement -> IF expr LCURLY . statement RCURLY
    (6) statement -> . ID EQUALS expr
    (7) statement -> . ID EQUALS ID
    (8) statement -> . PRINT LPARENTHESIS expr RPARENTHESIS
    (9) statement -> . expr
    (31) statement -> . ifstatement
    (32) statement -> . ifstatement elsestatement
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY
    (33) ifstatement -> . IF expr LCURLY statement RCURLY

    ID              shift and go to state 5
    PRINT           shift and go to state 7
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14
    IF              shift and go to state 15

    expr                           shift and go to state 6
    statement                      shift and go to state 61
    ifstatement                    shift and go to state 8

state 58

    (8) statement -> PRINT LPARENTHESIS expr RPARENTHESIS .

    ID              reduce using rule 8 (statement -> PRINT LPARENTHESIS expr RPARENTHESIS .)
    PRINT           reduce using rule 8 (statement -> PRINT LPARENTHESIS expr RPARENTHESIS .)
    INT             reduce using rule 8 (statement -> PRINT LPARENTHESIS expr RPARENTHESIS .)
    FLOAT           reduce using rule 8 (statement -> PRINT LPARENTHESIS expr RPARENTHESIS .)
    STRING          reduce using rule 8 (statement -> PRINT LPARENTHESIS expr RPARENTHESIS .)
    CHAR            reduce using rule 8 (statement -> PRINT LPARENTHESIS expr RPARENTHESIS .)
    BOOL            reduce using rule 8 (statement -> PRINT LPARENTHESIS expr RPARENTHESIS .)
    LOOP            reduce using rule 8 (statement -> PRINT LPARENTHESIS expr RPARENTHESIS .)
    IF              reduce using rule 8 (statement -> PRINT LPARENTHESIS expr RPARENTHESIS .)
    $end            reduce using rule 8 (statement -> PRINT LPARENTHESIS expr RPARENTHESIS .)
    RCURLY          reduce using rule 8 (statement -> PRINT LPARENTHESIS expr RPARENTHESIS .)


state 59

    (34) elsestatement -> ELSE LCURLY statement . RCURLY

    RCURLY          shift and go to state 62


state 60

    (35) expr -> LOOP LPARENTHESIS expr RPARENTHESIS . LCURLY statements RCURLY

    LCURLY          shift and go to state 63


state 61

    (33) ifstatement -> IF expr LCURLY statement . RCURLY

    RCURLY          shift and go to state 64


state 62

    (34) elsestatement -> ELSE LCURLY statement RCURLY .

    ID              reduce using rule 34 (elsestatement -> ELSE LCURLY statement RCURLY .)
    PRINT           reduce using rule 34 (elsestatement -> ELSE LCURLY statement RCURLY .)
    INT             reduce using rule 34 (elsestatement -> ELSE LCURLY statement RCURLY .)
    FLOAT           reduce using rule 34 (elsestatement -> ELSE LCURLY statement RCURLY .)
    STRING          reduce using rule 34 (elsestatement -> ELSE LCURLY statement RCURLY .)
    CHAR            reduce using rule 34 (elsestatement -> ELSE LCURLY statement RCURLY .)
    BOOL            reduce using rule 34 (elsestatement -> ELSE LCURLY statement RCURLY .)
    LOOP            reduce using rule 34 (elsestatement -> ELSE LCURLY statement RCURLY .)
    IF              reduce using rule 34 (elsestatement -> ELSE LCURLY statement RCURLY .)
    $end            reduce using rule 34 (elsestatement -> ELSE LCURLY statement RCURLY .)
    RCURLY          reduce using rule 34 (elsestatement -> ELSE LCURLY statement RCURLY .)


state 63

    (35) expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY . statements RCURLY
    (3) statements -> . statements statement
    (4) statements -> . statement
    (6) statement -> . ID EQUALS expr
    (7) statement -> . ID EQUALS ID
    (8) statement -> . PRINT LPARENTHESIS expr RPARENTHESIS
    (9) statement -> . expr
    (31) statement -> . ifstatement
    (32) statement -> . ifstatement elsestatement
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY
    (33) ifstatement -> . IF expr LCURLY statement RCURLY

    ID              shift and go to state 5
    PRINT           shift and go to state 7
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14
    IF              shift and go to state 15

    expr                           shift and go to state 6
    statements                     shift and go to state 65
    statement                      shift and go to state 4
    ifstatement                    shift and go to state 8

state 64

    (33) ifstatement -> IF expr LCURLY statement RCURLY .

    ELSE            reduce using rule 33 (ifstatement -> IF expr LCURLY statement RCURLY .)
    ID              reduce using rule 33 (ifstatement -> IF expr LCURLY statement RCURLY .)
    PRINT           reduce using rule 33 (ifstatement -> IF expr LCURLY statement RCURLY .)
    INT             reduce using rule 33 (ifstatement -> IF expr LCURLY statement RCURLY .)
    FLOAT           reduce using rule 33 (ifstatement -> IF expr LCURLY statement RCURLY .)
    STRING          reduce using rule 33 (ifstatement -> IF expr LCURLY statement RCURLY .)
    CHAR            reduce using rule 33 (ifstatement -> IF expr LCURLY statement RCURLY .)
    BOOL            reduce using rule 33 (ifstatement -> IF expr LCURLY statement RCURLY .)
    LOOP            reduce using rule 33 (ifstatement -> IF expr LCURLY statement RCURLY .)
    IF              reduce using rule 33 (ifstatement -> IF expr LCURLY statement RCURLY .)
    $end            reduce using rule 33 (ifstatement -> IF expr LCURLY statement RCURLY .)
    RCURLY          reduce using rule 33 (ifstatement -> IF expr LCURLY statement RCURLY .)


state 65

    (35) expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements . RCURLY
    (3) statements -> statements . statement
    (6) statement -> . ID EQUALS expr
    (7) statement -> . ID EQUALS ID
    (8) statement -> . PRINT LPARENTHESIS expr RPARENTHESIS
    (9) statement -> . expr
    (31) statement -> . ifstatement
    (32) statement -> . ifstatement elsestatement
    (10) expr -> . expr DIVIDE expr
    (11) expr -> . expr MULTIPLY expr
    (12) expr -> . expr ADD expr
    (13) expr -> . expr SUBTRACT expr
    (14) expr -> . expr MODULUS expr
    (15) expr -> . expr EEQUALS expr
    (16) expr -> . expr GREATER expr
    (17) expr -> . expr SMALLER expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . expr NOTEQUALS expr
    (21) expr -> . expr GEQUAL expr
    (22) expr -> . expr SEQUAL expr
    (23) expr -> . expr INCREMENT
    (24) expr -> . expr DECREMENT
    (25) expr -> . ID
    (26) expr -> . INT
    (27) expr -> . FLOAT
    (28) expr -> . STRING
    (29) expr -> . CHAR
    (30) expr -> . BOOL
    (35) expr -> . LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY
    (33) ifstatement -> . IF expr LCURLY statement RCURLY

    RCURLY          shift and go to state 66
    ID              shift and go to state 5
    PRINT           shift and go to state 7
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11
    CHAR            shift and go to state 12
    BOOL            shift and go to state 13
    LOOP            shift and go to state 14
    IF              shift and go to state 15

    expr                           shift and go to state 6
    statement                      shift and go to state 16
    ifstatement                    shift and go to state 8

state 66

    (35) expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .

    DIVIDE          reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    MULTIPLY        reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    ADD             reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    SUBTRACT        reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    MODULUS         reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    EEQUALS         reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    GREATER         reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    SMALLER         reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    AND             reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    OR              reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    NOTEQUALS       reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    GEQUAL          reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    SEQUAL          reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    INCREMENT       reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    DECREMENT       reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    ID              reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    PRINT           reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    INT             reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    FLOAT           reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    STRING          reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    CHAR            reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    BOOL            reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    LOOP            reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    IF              reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    $end            reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    LCURLY          reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    RCURLY          reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)
    RPARENTHESIS    reduce using rule 35 (expr -> LOOP LPARENTHESIS expr RPARENTHESIS LCURLY statements RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DIVIDE in state 46 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 46 resolved as shift
WARNING: shift/reduce conflict for ADD in state 46 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 46 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 46 resolved as shift
WARNING: shift/reduce conflict for EEQUALS in state 46 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 46 resolved as shift
WARNING: shift/reduce conflict for SMALLER in state 46 resolved as shift
WARNING: shift/reduce conflict for AND in state 46 resolved as shift
WARNING: shift/reduce conflict for OR in state 46 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 46 resolved as shift
WARNING: shift/reduce conflict for GEQUAL in state 46 resolved as shift
WARNING: shift/reduce conflict for SEQUAL in state 46 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 46 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 46 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 51 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 51 resolved as shift
WARNING: shift/reduce conflict for ADD in state 51 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 51 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 51 resolved as shift
WARNING: shift/reduce conflict for EEQUALS in state 51 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 51 resolved as shift
WARNING: shift/reduce conflict for SMALLER in state 51 resolved as shift
WARNING: shift/reduce conflict for AND in state 51 resolved as shift
WARNING: shift/reduce conflict for OR in state 51 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 51 resolved as shift
WARNING: shift/reduce conflict for GEQUAL in state 51 resolved as shift
WARNING: shift/reduce conflict for SEQUAL in state 51 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 51 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 51 resolved as shift
WARNING: reduce/reduce conflict in state 39 resolved using rule (statement -> ID EQUALS ID)
WARNING: rejected rule (expr -> ID) in state 39
